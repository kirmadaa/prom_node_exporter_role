- name: Create node_exporter user
  ansible.builtin.user:
    name: node_exporter
    comment: 'Prometheus Node Exporter User'
    shell: /bin/false
    system: yes

- name: Define architecture mapping
  set_fact: "{{ lookup('file', 'vars/main.yml') | from_yaml }}"

- name: Download Prometheus Node Exporter AMD64 or ARM binary
  ansible.builtin.get_url:
    url: "https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-{{ architecture_mapping[ansible_architecture] }}.tar.gz"
    dest: "/tmp/node_exporter-1.7.0.linux-{{ architecture_mapping[ansible_architecture] }}.tar.gz"
    mode: '0644'

- name: Extract Node Exporter
  ansible.builtin.unarchive:
    src: "/tmp/node_exporter-1.7.0.linux-{{ architecture_mapping[ansible_architecture] }}.tar.gz"
    dest: "/opt"
    remote_src: yes
    creates: "/opt/node_exporter-1.7.0.linux-{{ architecture_mapping[ansible_architecture] }}"


- name: Set permissions
  ansible.builtin.file:
    path: "/opt/node_exporter-1.7.0.linux-{{ architecture_mapping[ansible_architecture] }}"
    state: directory
    mode: '0755'
    owner: node_exporter
    group: node_exporter
    recurse: yes

- name: Create systemd service
  ansible.builtin.template:
    src: "node_exporter.service.j2"
    dest: "/etc/systemd/system/node_exporter.service"
  notify: 
    - restart node_exporter
    - reload systemd

- name: Start and enable Node Exporter service
  ansible.builtin.service:
    name: node_exporter
    state: started
    enabled: yes
  when: ansible_architecture == 'arm64' or ansible_architecture == 'amd64'

- name: Reload systemd daemon
  ansible.builtin.shell:
    cmd: "systemctl --system daemon-reload"

